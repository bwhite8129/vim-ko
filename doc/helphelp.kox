*helphelp.txt*  Vim version 7.4 대상.  새로 고침: 2012년 11월 28일


                     VIM 상세 설명서 - Bram Moolenaar 저
                                       정지용 역


도움말에 대한 도움말					*helphelp*

1. 도움말 명령			|online-help|
2. 도움말 번역하기		|help-translated|
3. 도움말 쓰기			|help-writing|

==============================================================================
1. 도움말 명령						*online-help*

			*help* *<Help>* *:h* *:help* *<F1>* *i_<F1>* *i_<Help>*
<Help>		또는
:h[elp]			새 창을 열고, 도움말 파일을 읽기 전용 상태로
			보여줍니다.  이미 열린 도움말 창이 있다면, 그 창을
			사용합니다.  기존 창이 없는 경우, 현재 창이 화면
			전체의 폭을 차지하고 있거나 80글자 이상이라면, 현재
			창의 위에 표시됩니다.  그렇지 않으면 전체 창의 위쪽에
			표시됩니다.
			여러 언어 도움말이 설치되어있는 경우,
			'helplang'(도움말 언어) 설정으로 언어를 선택할 수
			있습니다.
			{not in Vi}

						*{subject}* *E149* *E661*
:h[elp] {주제}		":help"와 동일하게 창을 연 후, {주제} 태그로
			이동합니다.  {주제}에는 "*"나 "?", "[a-z]" 같은
			와일드카드 문자를 사용할 수 있습니다:
			   :help z?	임의의 "z" 명령으로 이동
			   :help z.	"z." 명령의 도움말로 이동
			지정한 패턴과 완전히 일치하는 도움말이 없거나, 여럿이
			일치하는 경우에는, "최선의" 도움말로 이동합니다.  어떤
			것이 다른 것보다 나은지를 판단하기 위해 복잡한
			알고리즘을 사용합니다.  다음과 같은 정보들을
			고려합니다:
			- 대소문자까지 일치하는 경우가 우선됩니다.
			- 영문자나 숫자가 아닌 문자가 처음에 나오는 경우가
			  중간에 나오는 경우보다 우선됩니다.
			- 태그의 시작이나 앞부분에 나오는 경우가 뒤에 나오는
			  경우보다 우선됩니다.
			- 더 많은 글자가 일치할수록 우선됩니다.
			- 매치의 길이가 짧을수록 우선됩니다. 

			{주제}가 여러 언어로 제공되는 경우, 'helplang'
			설정으로 언어를 선택할 수 있습니다.  특정한 언어의
			태그를 바로 찾으려면 뒤에 "@ab"같이 두 자리 언어
			코드를 붙여서 지정할 수 있습니다.  |help-translated|를
			참고하세요.

			{주제}를 길게 쓸수록, 더 적은 수가 일치할 겁니다.
			명령줄 자동완성을 사용해보면 이걸 더 명확하게 관찰하
			수 있는데요.  ":help 주제"까지 입력한 상태에서
			CTRL-D를 눌러보세요.  |c_CTRL-D|
			여러 개의 일치 후보가 있는 경우, CTRL-D를 눌러서
			목록을 볼 수 있습니다 예: >
				:help cont<Ctrl-D>

<			CTRL-V의 도움말을 보기 위해 ":help CTRL-V"라고
			입력하는 대신, 다음과 같이 입력하면 됩니다: >
				:help ^V
<			이 방법은 다른 문자에 대해서도 쓸 수 있습니다.  예를
			들어 입력 모드의 CTRL-V에 대한 도움말을 보려면: >
				:help i^V
<
			정규표현식 |pattern|을 사용하려면, 먼저 ":help"로
			도움말 창을 연 후, 도움말 창에서 ":tag {패턴}" 명령을
			사용하세요.  ":tnext" 명령으로 일치하는 다른 태그로
			이동할 수 있습니다.  "tselect"로 일치하는 태그들의
			목록을 본 후 선택할 수도 있습니다. >
				:help index| :tse z.

<			아무런 인자 없이 명령을 실행하면 "help"에 대한 결과가
			나옵니다.  가능한 전체 후보를 보여주는 것은 매우
			느릴테니까요.  
			가능한 일치 후보의 수는 최대 300개입니다. 

			이 명령 뒤에는 '|'를 붙인 후, 다른 명령을 연이어 쓸 수
			있습니다.  하지만 그렇다고 help 명령안에서 '|'를
			이스케이프 할 필요는 없습니다.  즉, 다음 두 가지가
			모두 동작합니다: >
				:help |
				:help k| only
<			'|' 앞의 공백이 ":help" 명령의 인자로 간주됩니다.
			help 명령과 뒤따르는 명령을 <LF>나 <CR>로 구분할 수도
			있습니다.  이 경우에는 <LF>나 <CR>을 입력하기 위해
			CTRL-V를 먼저 입력해야합니다.  예: >
				:help so<C-V><CR>only
<			{not in Vi}

:h[elp]! [주제]		":help"와 동일하지만, 영어가 아닌 언어의 도움말인
			경우, 되도록 현재 파일과 동일한 언어의 도움말 파일에서
			태그를 찾습니다.  |help-translated|를 참고하세요.

							*:helpg* *:helpgrep*
:helpg[rep] {패턴}[@xx]
			전체 도움말 파일에서 {패턴}을 찾고 일치하는 곳의
			목록을 만듭니다.  그리고 첫 번째 위치로 이동합니다.
			[@xx]를 추가로 지정하는 경우에는, "xx" 언어에서만
			찾습니다.
			일치하는 위치들은 |quickfix|(퀵픽스) 명령으로 살펴볼 수
			있습니다.  예를 들어, |:cnext|로 다음 일치하는 위치로
			이동할 수 있습니다.  또는 |:cwindow|로 일치하는
			위치들을 퀵픽스 창에서 볼 수 있습니다.
			{패턴}은 Vim 정규표현식 패턴(|pattern|)입니다.
			'ignorecase'(대소문자 무시) 설정을 끈 상태라면, "\c"를
			붙여서 대소문자를 무시할 수 있습니다.
			대소문자를 구분하는 예: >
				:helpgrep Uganda
<			대소문자를 구분하지 않는 예: >
				:helpgrep uganda\c
<			프랑스어 도움말에서 찾는 예: >
				:helpgrep backspace@fr
<			패턴에는 줄바꿈을 넣을 수 없고, 무조건 한 줄에
			일치해야 합니다.  |:grep| 명령을 대신 쓸 수도 있지만,
			그런 경우 도움말 파일들의 목록을 만드는 일이 복잡할
			겁니다.
			압축한 도움말 파일에서는 찾을 수 없습니다 (Fedora가
			도움말 파일을 압축합니다).
			{not in Vi}

							*:lh* *:lhelpgrep*
:lh[elpgrep] {패턴}[@xx]
			":helpgrep"과 비슷하지만, 퀵픽스 목록 대신, 위치
			리스트를 사용합니다.  만약 도움말 창이 이미
			열려있다면, 해당 창의 위치 목록으로 지정됩니다.
			도움말 창이 없다면, 새로운 도움말 창이 생기며, 해당
			창의 위치 목록이 됩니다.  현재 창의 위치 목록은 바뀌지
			않습니다.

							*:exu* *:exusage*
:exu[sage]		Ex 명령에 대한 도움말을 보여줍니다.  Nvi 명령에서
			유래되었습니다.  {not in Vi}

							*:viu* *:viusage*
:viu[sage]		일반 명령에 대한 도움말을 보여줍니다.  Nvi 명령에서
			유래되었습니다.  {not in Vi}

|:help|를 아무 인자 없이 실행하면, 'helpfile'(도움말파일) 설정에 지정된 파일이
열립니다.  인자를 지정한 경우, 'runtimepath'(런타임경로)에 위치한 "doc/tags"
파일에서 지정한 태그를 찾습니다.

도움말 창의 초기 높이는 'helpheight'(도움말높이) 설정으로 지정할 수
있습니다(기본값 20).

태그를 이용하여 특정한 주제로 바로 이동할 수 있습니다.  두 가지 방법을 쓸 수
있습니다:
- 커서가 명령이나 설정 이름의 위에 있을 때 "CTRL-]" 명령으로 이동합니다.
  태그가 키워드일 때만 동작합니다.  "<C-Leftmouse>"나 "g<Leftmouse>"도
  "CTRL-]"와 동일하게 동작합니다.
- ":ta {주제}" 명령으로 이동합니다.  키워드가 아닌 곳으로도 이동할 수
  있습니다.

되돌아오려면 CTRL-T나 CTRL-O를 사용하세요.
도움말 창을 닫으려면 ":q" 명령을 사용하세요.

찾고 있는 항목과 일치하는 후보가 여럿이라면, 다음과 같이 각각을 이동할 수
있습니다:
1. 도움말 창을 여세요.
2. ":tag" 명령으로 태그를 지정할 때 앞에 슬래시를 붙이세요. 예: >
	:tag /min
3. ":tnext"로 다음 일치하는 후보로 이동하세요.

플러그인이나 다른 항목의 도움말을 추가할 수도 있습니다.  배포판에 기본으로
포함된 도움말은 건드리지 않아도 됩니다.  |add-local-help|를 참고하세요.

추가 설명서를 쓰려면, |write-local-help|를 참고하세요.

추가 설명서의 제목들이 자동으로 "help.txt" 도움말의 "추가 설명서"
영역(|local-additions|)에 들어갑니다.  이는 Vim으로 파일을 열 때 처리되므로,
파일 자체는 변경되지 않습니다.  모든 도움말 파일의 첫 줄 내용을 가져와서
보여주는 것입니다.  $VIMRUNTIME/doc 디렉터리는 빼고요.

							*help-xterm-window*
도움말의 내용을 다른 xterm 창에 표시하려면, 다음 명령을 사용하세요: >
	:!xterm -e vim +help &
<

			*:helpfind* *:helpf*
:helpf[ind]		|:help|와 같지만, 대화상자로 인자를 물어보는 점이
			다릅니다.  하위호환성을 위해 제공되며, 내장 대화상자가
			아니라 도움말 찾기...(ToolBar.FindHelp)를 실행합니다.
			{|+GUI_GTK|로 컴파일 한 경우에만}
			{not in Vi}

					*:helpt* *:helptags*
				*E154* *E150* *E151* *E152* *E153* *E670*
:helpt[ags] [++t] {디렉터리}
			{디렉터리}의 도움말 파일에 대한 태그파일을 생성합니다.
			지정한 디렉터리 및 그 하위 디렉터리의 모든 "*.txt"와
			"*.??x" 파일에서 별표 사이에 표시된 태그들을 모두
			모읍니다.  "*.??x" 파일은 번역한 도움말이고, "tags-??"
			파일이 만들어집니다.  |help-translated|를 참고하세요.
			생성된 태그 파일은 정렬되어있습니다.
			중복된 태그가 있으면 에러가 표시됩니다.  기존의
			태그 파일이 있어도 조용히 덮어씁니다.  "++t" 인자를
			지정하면, "help-tags" 태그가 강제로 추가됩니다.  이는
			{디렉터리}가 $VIMRUNTIME/doc일 때도 마찬가지입니다.
			런타임 디렉터리의 도움말 태그를 다시 만들려면 (해당
			위치에 쓰기 권한이 있어야 합니다): >
				:helptags $VIMRUNTIME/doc
<			{not in Vi}


==============================================================================
2. 도움말 번역하기					*help-translated*

기존의 영어 도움말 파일 외에, 번역한 도움말 파일을 추가할 수 있습니다.  Vim은
'runtimepath'의 "doc" 디렉터리에 있는 모든 도움말 파일을 찾아봅니다.  이
기능은 |+multi_lang| 기능을 켠 채로 컴파일 했을 때만 동작합니다.

현재 시점에 사용가능한 번역은:
	중국어     - 여러 명의 역자
	프랑스어   - David Blanchet 역
	이탈리아어 - Antonio Colombo 역
	일본어     - 여러 명의 역자
	폴란드어   - Mikolaj Machowski 역
	러시아어   - Vassily Ragosin 역
Vim 웹사이트에서 받을 수 있습니다: http://www.vim.org/translations.php

번역된 도움말 파일은 다음과 같이 구성됩니다:

	help.abx
	howto.abx
	...
	tags-ab

"ab"는 두 글자 언어 코드입니다.  즉 이탈리아어의 파일명들은 다음과 같습니다:

	help.itx
	howto.itx
	...
	tags-it

'helplang' 설정으로 선호하는 언어(들)를 설정할 수 있습니다.  기본값은
사용환경에 따라 결정됩니다.  Vim은 선호하는 언어(들)의 일치하는 태그를 먼저
찾습니다.  없는 경우에는 영어를 찾습니다.

특정 언어에서 태그를 찾으려면, "@ab"의 "ab" 같이 두 글자 언어 코드를 태그 뒤에
붙이세요.  예: >
	:he user-manual@it
	:he user-manual@en
첫 번째는 이탈리아어 사용설명서를 찾습니다.  'helplang'이 지정되어있지
않더라도요.  두 번째는 'helplang'이 "it"로 지정되어있더라도 영어 사용설명서를
보여줍니다.

":help" 명령에서 명령줄 자동완성을 쓰면, "@en" 부분은 태그가 여러 언어에
존재할 때만 표시됩니다.  영어에 대한 태그만 존재하는 경우에는 "@en"이
무시됩니다.

CTRL-]나 ":help!"를 영어가 아닌 도움말 파일에서 사용하면, Vim은 같은 언어의
도움말에서 태그를 찾습니다.  태그가 없다면 'helplang'에서 찾습니다.

도움말은 latin1이나 utf-8 인코딩을 써야만합니다.  Vim은 첫 줄에서 아스키
문자가 아닌 문자를 만나야 인코딩이 utf-8이라고 생각합니다.  따라서 첫 줄의
"For Vim version" 부분을 꼭 번역해야합니다.

한 디렉터리의 한 언어 도움말은 꼭 동일한 인코딩을 사용해야합니다.  다른 언어인
경우나 한 언어이지만 다른 디렉터리에 있는 경우에는 다른 인코딩을 사용할 수
있습니다.

번역가들을 위한 힌트:
- 태그는 번역하지 마세요.  그래야 선호하는 언어를 지정하기 위해 'helplang'을
  쓸 수 있습니다.  새로운 태그를 추가하는 것은 괜찮습니다.
- 파일의 일부를 번역하지 않고 생략하는 경우에는, "tag@en" 형식으로 영어 버전에
  대한 태그를 추가해 놓으세요.
- 모든 파일과 태그파일까지를 묶어서 다운로드 할 수 있게 만들어놓으세요.
  사용자가 "doc" 디렉터리에 집어넣고 바로 사용할 수 있도록이요.  그리고
  Bram에게 알려주면 www.vim.org 에 추가해 줄 수 있을 겁니다.
- |:helptags| 명령으로 태그파일을 생성하세요.  지정한 디렉터리의 모든 언어들을
  찾아볼 겁니다.

==============================================================================
3. 도움말 쓰기						*help-writing*

쉬운 사용을 위해, 플러그인의 Vim 도움말 파일도 표준 Vim 도움말 파일의 형식을
따라야합니다.  새로운 도움말을 쓰고 있다면, 기존의 도움말을 하나 복사해다가 그
형식을 살려서 쓰는 편이 낫습니다.

도움말의 첫 줄은 반드시 다음 형식이어야합니다:

*helpfile_name.txt*	Vim version 7.3 대상.	새로 고침: 2010년 6월 4일

맨 처음에는 도움말 파일 이름에 대한 링크가 옵니다.  그 다음에는 적용 가능한
Vim 버전이 나옵니다.  마지막에는 파일을 마지막으로 변경한 날짜가 옵니다.  각
요소는 탭으로 구분합니다.

도움말 파일의 맨 끝에는, Vim 모드 줄로 'textwidth'와 'tapstop'을 설정하고,
'filetype'은 'help'로 지정하세요.  모드 줄에서 전역 옵션은 절대 설정하지
마세요.  도움말을 읽는 사람에게 예기치 못한 결과를 초래할 수 있습니다.


태그

도움말 태그를 정의하려면, 태그 이름을 별표 사이에 넣으세요 (*태그이름*).  태그
이름은 Vim의 다른 도움말 파일의 태그들과 겹치지 않아야하고, Vim 플러그인의
이름으로 시작하는 것이 이상적입니다.  태그 이름은 보통 오른쪽 정렬 시킵니다.

기존의 도움말 태그를 지칭하거나 연결하려면, 이름을 세로 줄(|) 사이에 넣으세요.
예: |help-writing|.

도움말의 Vim 설정을 지칭하려면, 설정 이름을 작은 따옴표 안에 쓰세요.  예:
'statusline'


강조

절의 제목을 지정하려면, 줄의 맨 끝에 물결 표시를 넣으세요.  해당 줄을 다른
색으로 보여줍니다.  예:

Column heading~

도움말에서 각 절을 구분하려면, 줄의 맨 첫 글자부터 '=' 문자를 반복해서
넣으세요.  각 절을 구분하는 줄은 다르게 표시됩니다.

Ex 명령을 그대로 옮기려면, 명령이 시작하기 전 줄의 끝에 크다 기호(>)를 넣고,
명령이 끝나고 나오는 공백이 아닌 첫 줄의 첫 문자로 작다 기호(<)를 넣으세요.
줄의 맨 첫 글자가 공백이 아니어도 작다 기호를 넣은 것과 마찬가지 효과를
냅니다.  예: >
    function Example_Func()
	echo "Example"
    endfunction
<

다음 내용도 Vim 도움말 파일에서 다르게 표시됩니다:
  - <PageDown> 같이 <> 표기법으로 표시한 내용이나 CTRL-X 같은 제어문자.
  - {괄호} 안에 든 것들. 예 {lhs}, {rhs} (역주: 안타깝게도 한글은 제외입니다.)

"Note"나 "Notes" 같은 단어는 자동으로 눈에 띄게 표시됩니다.  다음과 같이
사용하세요:
	*Todo	todo(해야할 것)
	*Error	error(무언가 잘못 되었다)

더 자세한 내용은 $VIMRUNTIME/syntax/help.vim 에서 확인하세요.

 vim:tw=78:ts=8:ft=help:norl:
